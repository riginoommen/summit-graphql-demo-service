!function(e){var t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(o,n,function(t){return e[t]}.bind(null,n));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=o(r(1)),i=r(2),s=o(r(3)),u=r(4),{ApolloLogExtension:a}=r(5),l=o(r(6)),p=r(7),c=r(8),m=r(9),f=process.env.PORT||8080,d=n.default();d.use(m());const g=[()=>new a({level:"info",timestamp:!0})];l.default.plugin(e=>{e.options.usePushEach=!0}),l.default.set("useNewUrlParser",!0),l.default.set("useFindAndModify",!1),l.default.set("useCreateIndex",!0),l.default.set("useUnifiedTopology",!0);l.default.connect("mongodb+srv://graphqluser:graphqlpwd@mongo-rhzev.mongodb.net/graphql-db?retryWrites=true&w=majority",{useNewUrlParser:!0,useCreateIndex:!0}).catch(console.error),l.default.connection.on("error",e=>{console.error(e)});const h=new i.ApolloServer({playground:!0,schema:u.mergeSchemas({schemas:[p.typeDef],resolvers:[c.SummitGraphqlDemoResolver]}),subscriptions:{path:"/subscriptions"},formatError:e=>({message:e.message,locations:e.locations,stack:e.stack?e.stack.split("\n"):[],path:e.path}),extensions:g});h.applyMiddleware({app:d});const y=s.default.createServer(d);h.installSubscriptionHandlers(y),t.default=y.listen({port:f},()=>{console.log(`Microservice running on local at ${f}${h.graphqlPath}`)})},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("apollo-server-express")},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("graphql-tools")},function(e,t){e.exports=require("apollo-log")},function(e,t){e.exports=require("mongoose")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.typeDef="type Query {\n  # Query Definitions\n  list: [SummitGraphqlDemoType]\n  get(id: String!): SummitGraphqlDemoType\n}\n\ntype Mutation {\n  # Mutation Definitions\n  create(input: SummitGraphqlDemoInput): SummitGraphqlDemoType\n  update(input: SummitGraphqlDemoInput): SummitGraphqlDemoType\n  delete(id: String!): SummitGraphqlDemoType\n}\n\ntype SummitGraphqlDemoType {\n  message: String\n}\n\ninput SummitGraphqlDemoInput {\n  message: String\n}"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SummitGraphqlDemoResolver={Query:{list:(e,t,r)=>[{message:"GET API for SummitGraphqlDemo microservice"}],get:(e,t,r)=>({message:"GET by ID API for SummitGraphqlDemo microservice"})},Mutation:{create:(e,t,r)=>({message:"POST API for SummitGraphqlDemo microservice"}),update:(e,t,r)=>({message:"PUT API for SummitGraphqlDemo microservice"}),delete:(e,t,r)=>({message:"DELETE API for SummitGraphqlDemo microservice"})}}},function(e,t){e.exports=require("cookie-parser")}]);